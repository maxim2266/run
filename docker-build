#!/bin/sh -e

DEFAULT_IMAGE_NAME='run-local:latest'
SCRIPT="$(basename "$0")"

# usage display
usage() {
	echo >&2 "Usage: $SCRIPT [-cbh] [-o FILE]

Options (at least one must be given):
  -c       delete all previous images
  -b       build a new image
  -o FILE  copy the compiled binary to the given local FILE

Environment variables:
  DOCKER      docker command (default: \"docker\")
  IMAGE_NAME  name of the docker image (default: \"$DEFAULT_IMAGE_NAME\")
"
	exit 1
}

[ "$#" -gt 0 ] || usage

# logging
log_info() {
	echo >&2 "$SCRIPT: [info]" "$@"
}

die() {
	echo >&2 "$SCRIPT: [error]" "$@"
	exit 1
}

# overrides
DOCKER="${DOCKER:-docker}"
IMAGE_NAME="${IMAGE_NAME:-$DEFAULT_IMAGE_NAME}"

# command line options
while getopts ':cbho:' opt
do
	case "$opt" in
		c)	log_info 'deleting previous images'
			"$DOCKER" image inspect --format='ignore me' "$IMAGE_NAME" 2>/dev/null	\
			&& "$DOCKER" image rm "$IMAGE_NAME"
			;;
		o)	DEST="$OPTARG"
			;;
		b)	WANT_BUILD='yes'
			;;
		h)	usage
			;;
		:)	die "option -$OPTARG requires an argument"
			;;
		?)	die "invalid option -$OPTARG"
			;;
	esac
done

# image
if [ -n "$WANT_BUILD" ]
then
	log_info "building image \"$IMAGE_NAME\""

	"$DOCKER" build -f - -t "$IMAGE_NAME" . <<-EOF
		FROM    alpine:latest
		RUN     apk add --no-cache gcc make musl-dev git
		WORKDIR /build
		COPY    . .
		RUN     [ "make", "clean", "static" ]
	EOF
fi

# resulting binary
if [ -n "$DEST" ]
then
	log_info "copying binary to $(realpath "$DEST")"

	# traps
	trap '[ -n "$ID" ] && "$DOCKER" rm -fiv "$ID" >/dev/null' EXIT
	trap 'echo >&2 "interrupted!"' INT TERM HUP QUIT

	# container
	ID="$("$DOCKER" create "$IMAGE_NAME")"

	# copy the binary
	"$DOCKER" cp "$ID:/build/run" "$DEST"
fi

log_info 'all done.'
